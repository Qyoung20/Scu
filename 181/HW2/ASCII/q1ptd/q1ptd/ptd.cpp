#include <iostream>
#include <vector>

std::vector<int> XORVectors(const std::vector<int>& vec1, const std::vector<int>& vec2) {
    if (vec1.size() != vec2.size()) {
        throw std::runtime_error("The input vectors must have the same size.");
    }

    std::vector<int> result(vec1.size());

    for (size_t i = 0; i < vec1.size(); ++i) {
        result[i] = vec1[i] ^ vec2[i];
    }

    return result;
}

int main() {
    std::vector<int> vec1 = { 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0,
0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,
0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0,
0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0,
1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1,
1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0 };
    std::vector<int> vec2 = { 181, 210, 86, 5, 165, 245, 93, 50, 124, 85, 172, 216, 184, 91, 155, 127, 193, 164, 7, 131, 207, 15, 52, 13, 222, 170, 51, 129, 128, 188, 121, 110, 92, 105, 108, 232, 168, 141, 45, 91, 64, 93, 210, 83, 168, 157, 206, 10, 111, 199, 35, 136, 12, 177, 220, 179, 66, 180, 74, 166, 164, 36, 182, 132, 194, 105, 254, 39, 229, 50, 63, 190, 251, 32, 247, 121, 105, 164, 221, 217, 198, 67, 15, 166, 96, 77, 45, 178, 201, 91, 59, 156, 168, 57, 17, 244, 125, 159, 45, 175, 83, 72, 3, 70, 73, 16, 72, 134, 66, 43, 147, 185, 6, 202, 210, 44, 57, 167, 95, 22, 196, 31, 112, 108, 93, 104, 17, 188, 54, 93, 207, 13, 189, 202, 80, 135, 160, 168, 182, 175, 182, 142, 108, 214, 124, 189, 106, 106, 34, 147, 143, 113, 68, 43, 128, 244, 30, 248, 122, 30, 32, 111, 107, 23, 250, 18, 238, 115, 230, 101, 241, 67, 119, 228, 81, 236, 156, 58, 198, 176, 112, 210, 111, 8, 166, 128, 41, 228, 152, 157, 27, 231 };

    try {
        std::vector<int> xor_result = XORVectors(vec1, vec2);

        std::cout << "XOR Result: ";
        for (const auto& value : xor_result) {
            std::cout << value << " ";
        }
        std::cout << std::endl;
    }
    catch (const std::runtime_error& e) {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
